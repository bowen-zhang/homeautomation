syntax="proto3";

package ha.security;

import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "shared/proto/common.proto";

// Database Object

message Archive {
  string location = 1;
  int64 max_size = 2;
  int32 max_days = 3;
}

message Video {
  int32 width = 1;
  int32 height = 2;
  int32 framerate = 3;
  int32 quality = 4;
  
  Archive local_archive = 5;
}

message Component {
  oneof kind {
    Video video = 1;
  }
}

message Node {
  string id = 1;
  string name = 2;
  repeated Component components = 3;
}

message VideoSpec {
  int32 width = 1;
  int32 height = 2;
  int32 framerate = 3;
}

// Configuration

message ServerConfig {
  string video_archive_location = 1;
  int32 max_record_duration_sec = 2;
}

message Config {
  ha.Endpoint security_service = 1;  
  ha.Endpoint kafka = 2;
  ha.Endpoint mongodb = 3;
  ha.Endpoint webserver = 4;

  ServerConfig server = 5;
  repeated Node nodes = 6;
}

// gRPC Service

message RegisterNodeRequest {
  string node_id = 1;
}

message RegisterNodeResponse {
  Node node = 1;
}

message StreamVideoRequest {
  string node_id = 1;
  google.protobuf.Timestamp timestamp = 2;
  bytes image = 3;

  VideoSpec spec = 4;
}

message StreamVideoResponse {
}

service SecurityService {
  rpc RegisterNode(RegisterNodeRequest) returns (RegisterNodeResponse) {}
  rpc StreamVideo(stream StreamVideoRequest) returns (stream StreamVideoResponse) {}
}